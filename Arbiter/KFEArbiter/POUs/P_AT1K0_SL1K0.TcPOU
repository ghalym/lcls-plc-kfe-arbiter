<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="P_AT1K0_SL1K0" Id="{e6d6663f-b8fc-454f-941a-fd821300896c}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_AT1K0_SL1K0
VAR

    // Transmisison request and status with plc-kfe-gatt
    {attribute 'TcLinkTo' := 'TIIB[plc-kfe-gatt]^IO Outputs^Requested Transmission'}
    q_nTranToAT1K0Req AT %Q* : ST_PMPS_Attenuator_IO; // Transmission request to AT1K0
    {attribute 'TcLinkTo' := 'TIIB[plc-kfe-gatt]^IO Inputs^Current Transmission'}
    i_nTranToAT1K0Stat AT %I* : ST_PMPS_Attenuator_IO; // Transmission request to AT1K0

    // plc-kfe-gatt interface diagnostics
    {attribute 'TcLinkTo' := 'TIIB[plc-kfe-gatt]^WcState^WcStateOut'}
    i_bWcStateOut_AT1K0 AT %I* : BOOL;
    {attribute 'TcLinkTo' := 'TIIB[plc-kfe-gatt]^WcState^WcStateIn'}
    i_bWcStateIn_AT1K0 AT %I* : BOOL;
    {attribute 'TcLinkTo' := 'TIIB[plc-kfe-gatt]^InfoData^State'}
    i_nState_AT1K0 AT %I* : UINT;

    // Apterure request and status to plc-kfe-motion
    {attribute 'TcLinkTo' := 'TIIB[plc-kfe-motion]^IO Outputs^AptArrayReq'}
    q_stAptArrayReq AT %Q* : ARRAY [1..4] OF ST_PMPS_Aperture_IO;
    {attribute 'TcLinkTo' := 'TIIB[plc-kfe-motion]^IO Inputs^AptArrayStatus'}
    i_stAptArrayStat AT %I* : ARRAY [1..4] OF ST_PMPS_Aperture_IO;

    // plc-kfe-motion interface diagnostics
    {attribute 'TcLinkTo' := 'TIIB[plc-kfe-motion]^WcState^WcStateOut'}
    i_bWcStateOut_KFEMOT AT %I* : BOOL;
    {attribute 'TcLinkTo' := 'TIIB[plc-kfe-motion]^WcState^WcStateIn'}
    i_bWcStateIn_KFEMOT AT %I* : BOOL;
    {attribute 'TcLinkTo' := 'TIIB[plc-kfe-motion]^InfoData^State'}
    i_nState_KFEMOT AT %I* : UINT;

    idx : UINT;

    ffKFEMotConnection : FB_FastFault := (
        i_DevName := 'PMPS Arbiter',
        i_Desc := 'EtherCAT interface watcher, for connection to KFE Motion systems for SL1K0 size requests. Very rare. Make a note, and if it can be reset, go ahead.',
        i_TypeCode := 16#5);
    ffKFEGattConnection : FB_FastFault := (
        i_DevName := 'PMPS Arbiter',
        i_Desc := 'EtherCAT interface watcher, for connection to KFE Gas Att. systems for Transmission requests. Very rare. Make a note, and if it can be reset, go ahead.',
        i_TypeCode := 16#5);
    bSimApt: BOOL;
	
// Administrative mode for beam intensity
	 {attribute 'pytmc' := '
   	   pv: @(PREFIX)IntensityJF
    '}
	nBeamIntensityJF: REAL :=GVL.nBeamIntensity;
	{attribute 'pytmc' := '
   	   pv: @(PREFIX)ApplyJF
    '}
	bApplyJF: BOOL:=FALSE;
	{attribute 'pytmc' := '
   	   pv: @(PREFIX)CancelJF
    '}
	bCancelJF: BOOL:=FALSE;
	
	{attribute 'pytmc' := '
   	   pv: @(PREFIX)DurationJF
    '}
	rDurationJF: REAL:=GVL.MaxDuration;//hours
	
	{attribute 'pytmc' := '
   	   pv: @(PREFIX)TimeRemainJF
    '}
	rTimeRemainJF: REAL:=GVL.MaxDuration;//hours
	
	tDuration:TIME;
	tonDuration:TON;
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
//Beam intensity factor implemenation
// No diff by zero
IF (nBeamIntensityJF =0) OR (nBeamIntensityJF > GVL.nBeamIntensity ) THEN nBeamIntensityJF:=GVL.nBeamIntensity; END_IF
//Check it it has expired or is cancelled and reset to defaults
IF(tonDuration.Q OR bCancelJF)
THEN 
	nBeamIntensityJF:=GVL.nBeamIntensity;
	bCancelJF := FALSE;
 	bApplyJF := FALSE;
END_IF
//IF NOT (bApplyJF) THEN nBeamIntensityJF:=GVL.nBeamIntensity; END_IF
// Maximum duration is 12 hours
rDurationJF := LIMIT(0,rDurationJF,MaxDuration);
//check if it is applied
tDuration:= TO_TIME(rDurationJF*60*60*1000);//to msec
tonDuration(IN:=bApplyJF,PT:=tDuration,ET=>);
rTimeRemainJF:= rDurationJF - (TO_REAL(tonDuration.ET)/60/60/1000);//to hours


//Calculate the new requested transmission


// If interface with plc-kfe-gatt OK carry out exchange
IF i_bWcStateOut_AT1K0 = 0 AND i_bWcStateIn_AT1K0 = 0 AND i_nState_AT1K0 = 8 THEN

    // Send request from this arbiter to the gas attenuator
	IF (bApplyJF) THEN
		q_nTranToAT1K0Req.nTran := LIMIT(0,(GVL.nBeamIntensity/nBeamIntensityJF)*PMPS_GVL.stRequestedBeamParameters.nTran*PMPS_GVL.TRANS_SCALING_FACTOR,1);
	ELSE
		q_nTranToAT1K0Req.nTran := PMPS_GVL.stRequestedBeamParameters.nTran*PMPS_GVL.TRANS_SCALING_FACTOR;
	END_IF

    q_nTranToAT1K0Req.xAttOK := 16#FF;

    //Update with judgement factor
	//Calculate the new requested transmission
	IF (bApplyJF) THEN
		PMPS_GVL.stCurrentBeamParameters.nTran := i_nTranToAT1K0Stat.nTran *(nBeamIntensityJF/GVL.nBeamIntensity);//REAL_TO_UINT(UINT_TO_REAL(i_nTranToAT1K0Stat.nTran)*0.01);
	ELSE
		PMPS_GVL.stCurrentBeamParameters.nTran := i_nTranToAT1K0Stat.nTran;//REAL_TO_UINT(UINT_TO_REAL(i_nTranToAT1K0Stat.nTran)*0.01);
	END_IF

    

    ffKFEGattConnection.i_xOK := TRUE;
ELSE
    // Fast fault
    ffKFEGattConnection.i_xOK := FALSE;

    PMPS_GVL.stCurrentBeamParameters.nTran := PMPS_GVL.TRANS_SCALING_FACTOR;//100;

END_IF

ffKFEGattConnection(io_fbFFHWO := g_FastFaultOutput1);

// If interface with plc-kfe-motion OK, carry out exchange
IF i_bWcStateIn_KFEMOT = 0 AND i_bWcStateOut_KFEMOT = 0 AND i_nState_KFEMOT = 8 THEN

    // Send request from this arbiter to kfe-mot
    MEMCPY( ADR(q_stAptArrayReq) , ADR(PMPS_GVL.stRequestedBeamParameters.astApertures) , PMPS_GVL.MAX_APERTURES * SIZEOF(ST_PMPS_Aperture_IO) );

    // 	Recieve current apreture state for broadcast
    MEMCPY( ADR(PMPS_GVL.stCurrentBeamParameters.astApertures) , ADR(i_stAptArrayStat) , PMPS_GVL.MAX_APERTURES * SIZEOF(ST_PMPS_Aperture_IO) );

    ffKFEMotConnection.i_xOK := TRUE;

ELSIF bSimApt THEN
    PMPS_GVL.stCurrentBeamParameters.astApertures := PMPS_GVL.stRequestedBeamParameters.astApertures;
ELSE
    // Fast fault
    ffKFEMotConnection.i_xOK := FALSE;
    // Set broadcast apterture states to not OK
    FOR idx := 1 TO PMPS_GVL.MAX_APERTURES DO
        PMPS_GVL.stCurrentBeamParameters.astApertures[idx].xOK := FALSE;
    END_FOR
END_IF

ffKFEMotConnection(io_fbFFHWO := g_FastFaultOutput1);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>